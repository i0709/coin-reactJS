{"version":3,"sources":["components/Header/logo.svg","components/Header/Header.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","App.js","reportWebVitals.js","index.js"],"names":["Img","styled","img","Header1","header","H1","h1","Header","src","logo","alt","Component","Td","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","amount","handleToggleShowBalance","DivApp","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","useEffect","length","valueChangeId","tickerUrl","newPrice","USD","newCoinData","values","newValues","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79a3c5d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\n//import '../../App.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Img = styled.img`\r\n    eight: 8rem;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst Header1 = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: 36px;\r\n    color: white;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 3rem;\r\n`;\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <Header1>\r\n                <Img src={logo} alt=\"logo\" />\r\n                <H1>\r\n                    Coin Exchange \r\n                </H1>\r\n            </Header1>       \r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Td = styled.td\r\n`\r\n    border: 1px solid #cccccc;\r\n    width: 25 vh;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n    \r\n    const handeClick = (event) => {\r\n        //Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n\r\n        props.handleRefresh(props.tickerId);         \r\n    }\r\n    \r\n    return(            \r\n        <tr>            \r\n            <Td>{props.name}</Td>\r\n            <Td>{props.ticker}</Td>\r\n            <Td>${props.price}</Td> \r\n            {props.showBalance ? <Td>{props.balance}</Td> : null}\r\n                        \r\n            <Td>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handeClick}>Refresh</button>\r\n                </form>\r\n            </Td>           \r\n        </tr>\r\n    );\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n    margin: 50px auto 50 auto;\r\n    display: inline-block;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList(props) {       \r\n    return (       \r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name:</th>\r\n                    <th>Ticker:</th>\r\n                    <th>Price:</th>\r\n                    {props.showBalance ? <th>Balance:</th> : null}\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.coinData.map(({key, name, ticker, price, balance}) =>  (\r\n                <Coin   key={key} \r\n                        handleRefresh={props.handleRefresh}\r\n                        name={name}                     \r\n                        ticker={ticker} \r\n                        balance = {balance}\r\n                        showBalance ={props.showBalance}\r\n                        price={price} \r\n                        tickerId={key}/>\r\n            ))}                  \r\n            </tbody>\r\n        </Table>          \r\n    )    \r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section\r\n`\r\n   font-size: 2rem;\r\n   text-align: left;\r\n   padding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\n\r\nexport default function AccountBalance(props) {    \r\n   \r\n    const buttonText = props.showBalance ? 'Hide balance' : 'Show Balance';\r\n    return (\r\n    <Section>\r\n        {props.showBalance ? <> Balance: ${props.amount} </>: null}\r\n        <button onClick={props.handleToggleShowBalance}>{buttonText}</button>                        \r\n    </Section>        \r\n    \r\n    );\r\n    \r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}\r\n","import React,{useState, useEffect} from 'react';\r\nimport Header from './components/Header/Header';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst DivApp = styled.div\r\n`\r\n  text-align: center;\r\n  background-color: rgb(78, 59, 97);\r\n  color: #cccccc;\r\n`;\r\n\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\r\n\r\nfunction App(props) {   \r\n\r\n    /*hooks rewrite */\r\n    const [balance,setBalance] = useState(10000);\r\n    const [showBalance, setShowBalance] = useState(true);\r\n    const [coinData,setCoinData] = useState([]);\r\n    \r\n\r\n    const componentDidMount = async () => {\r\n      const response = await axios.get('https://api.coinpaprika.com/v1/coins')    \r\n      const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);      \r\n      const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n      const promises = coinIds.map(id => axios.get(tickerUrl + id));\r\n      const coinData = await Promise.all(promises);   \r\n      const coinPriceData = coinData.map(function(response) {\r\n        const coin = response.data;\r\n        return{\r\n          key: coin.id,\r\n          name: coin.name,\r\n          ticker: coin.symbol,\r\n          balance: 0,\r\n          price: formatPrice(coin.quotes['USD'].price)\r\n        }\r\n      });\r\n      //Retrive the prices        \r\n      setCoinData(coinPriceData);\r\n    }   \r\n\r\n    useEffect(function(){\r\n      if(coinData.length === 0){\r\n        // component did mount\r\n        componentDidMount();\r\n      }else{\r\n        // component did update\r\n      }\r\n    });\r\n     \r\n\r\n    \r\n\r\n    const handleRefresh = async (valueChangeId) => {     \r\n      const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n      const response = await axios.get(tickerUrl);      \r\n      const newPrice = formatPrice(response.data.quotes.USD.price);\r\n      const newCoinData = coinData.map( function(values ) {\r\n        let newValues = {...values};      \r\n        if (valueChangeId === values.key){\r\n          newValues.price = newPrice;\r\n        }\r\n        return newValues;\r\n      \r\n      });     \r\n      setCoinData(newCoinData);\r\n  }\r\n\r\n  const handleToggleShowBalance = () => {   \r\n    setShowBalance( showBalance => !showBalance);\r\n  }\r\n\r\n  \r\n  return (\r\n    <DivApp>      \r\n      <Header />\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance} \r\n        handleToggleShowBalance={handleToggleShowBalance} />\r\n      <CoinList \r\n        coinData={coinData} \r\n        handleRefresh={handleRefresh} \r\n        showBalance={showBalance}/>   \r\n    </DivApp>\r\n  );\r\n  \r\n \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}